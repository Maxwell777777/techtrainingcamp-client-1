package com.jack.appnews.storage.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jack.appnews.bean.String_Converter;
import java.util.List;

import com.jack.appnews.bean.DBNewsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "new_list".
*/
public class DBNewsBeanDao extends AbstractDao<DBNewsBean, Long> {

    public static final String TABLENAME = "new_list";

    /**
     * Properties of entity DBNewsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property News_id = new Property(1, int.class, "news_id", false, "NEWS_ID");
        public final static Property News_title = new Property(2, String.class, "news_title", false, "NEWS_TITLE");
        public final static Property Content_type = new Property(3, int.class, "content_type", false, "CONTENT_TYPE");
        public final static Property Web_url = new Property(4, String.class, "web_url", false, "WEB_URL");
        public final static Property Created = new Property(5, int.class, "created", false, "CREATED");
        public final static Property Source_name = new Property(6, String.class, "source_name", false, "SOURCE_NAME");
        public final static Property Img_list_str = new Property(7, String.class, "img_list_str", false, "IMG_LIST_STR");
    }

    private final String_Converter img_list_strConverter = new String_Converter();

    public DBNewsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBNewsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"new_list\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NEWS_ID\" INTEGER NOT NULL ," + // 1: news_id
                "\"NEWS_TITLE\" TEXT," + // 2: news_title
                "\"CONTENT_TYPE\" INTEGER NOT NULL ," + // 3: content_type
                "\"WEB_URL\" TEXT," + // 4: web_url
                "\"CREATED\" INTEGER NOT NULL ," + // 5: created
                "\"SOURCE_NAME\" TEXT," + // 6: source_name
                "\"IMG_LIST_STR\" TEXT);"); // 7: img_list_str
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"new_list\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBNewsBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getNews_id());
 
        String news_title = entity.getNews_title();
        if (news_title != null) {
            stmt.bindString(3, news_title);
        }
        stmt.bindLong(4, entity.getContent_type());
 
        String web_url = entity.getWeb_url();
        if (web_url != null) {
            stmt.bindString(5, web_url);
        }
        stmt.bindLong(6, entity.getCreated());
 
        String source_name = entity.getSource_name();
        if (source_name != null) {
            stmt.bindString(7, source_name);
        }
 
        List img_list_str = entity.getImg_list_str();
        if (img_list_str != null) {
            stmt.bindString(8, img_list_strConverter.convertToDatabaseValue(img_list_str));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBNewsBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getNews_id());
 
        String news_title = entity.getNews_title();
        if (news_title != null) {
            stmt.bindString(3, news_title);
        }
        stmt.bindLong(4, entity.getContent_type());
 
        String web_url = entity.getWeb_url();
        if (web_url != null) {
            stmt.bindString(5, web_url);
        }
        stmt.bindLong(6, entity.getCreated());
 
        String source_name = entity.getSource_name();
        if (source_name != null) {
            stmt.bindString(7, source_name);
        }
 
        List img_list_str = entity.getImg_list_str();
        if (img_list_str != null) {
            stmt.bindString(8, img_list_strConverter.convertToDatabaseValue(img_list_str));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DBNewsBean readEntity(Cursor cursor, int offset) {
        DBNewsBean entity = new DBNewsBean( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // news_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // news_title
            cursor.getInt(offset + 3), // content_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // web_url
            cursor.getInt(offset + 5), // created
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // source_name
            cursor.isNull(offset + 7) ? null : img_list_strConverter.convertToEntityProperty(cursor.getString(offset + 7)) // img_list_str
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBNewsBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setNews_id(cursor.getInt(offset + 1));
        entity.setNews_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent_type(cursor.getInt(offset + 3));
        entity.setWeb_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreated(cursor.getInt(offset + 5));
        entity.setSource_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImg_list_str(cursor.isNull(offset + 7) ? null : img_list_strConverter.convertToEntityProperty(cursor.getString(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBNewsBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBNewsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBNewsBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
